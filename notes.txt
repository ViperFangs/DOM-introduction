The DOM (or Document Object Model) 
is a tree-like representation of the contents of a webpage - 
a tree of “nodes” with different relationships depending on how they’re arranged in the HTML document.

<div id="container">
  <div class="display"></div>
  <div class="controls"></div>
</div>

In the above example, the <div class="display"></div> is a “child” of <div id="container"></div> and a sibling to <div class="controls"></div>.
Think of it like a family tree. <div id="container"></div> is a parent, with its children on the next level, each on their own “branch”.

We can refer to other elements in DOM with their relationship (e.g. Parent relation, sibling relation)

element.querySelector(selector) returns a reference to the first match of selector
element.querySelectorAll(selectors) returns a “nodelist” containing references to all of the matches of the selectors

It’s important to note that when using querySelectorAll, the return value is not an array. It looks like an array, and it somewhat acts like an array, but it’s really a “nodelist”.
if problems arise, is to convert the nodelist into an array. You can do this with Array.from() or the spread operator

document.createElement(tagName, [options]) creates a new element of tag type tagName. [options] in this case means you can add some optional parameters to the function.
e.g. const div = document.createElement('div');
This function does NOT put your new element into the DOM - it simply creates it in memory.

To append a new element into DOM we use:
parentNode.appendChild(childNode) appends childNode as the last child of parentNode
parentNode.insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode

parentNode.removeChild(child) removes child from parentNode on the DOM and returns a reference to child

(http://jsfiddle.net/domenlightenment/wSv8M)
<
var div = document.querySelector('div');
var divStyle = div.style;

//set using cssText
divStyle.cssText = 'background-color:red;border:1px solid black;height:100px;width:100px;';
//get using cssText
console.log(divStyle.cssText);
//remove
divStyle.cssText = '';

//exactly that same outcome using setAttribute() and getAttribute()

//set using setAttribute
div.setAttribute('style','background-color:red;border:1px solid black;height:100px;width:100px;');
//get using getAttribute
console.log(div.getAttribute('style'));
//remove
div.setAttribute('style','');
>

div.style.background-color // doesn't work - attempts to subtract color from div.style.background
div.style.backgroundColor // accesses the div's background-color style
div.style['background-color'] // also works
div.style.cssText = "background-color: white;" // ok in a string

div.setAttribute('id', 'theDiv');                              
// if id exists, update it to 'theDiv', else create an id
// with value "theDiv"

div.getAttribute('id');                                        
// returns value of specified attribute, in this case
// "theDiv"

div.removeAttribute('id');                                     
// removes specified attribute

div.classList.add('new');                                      
// adds class "new" to your new div

div.classList.remove('new');                                   
// removes "new" class from div

div.classList.toggle('active');                                
// if div doesn't have class "active" then add it, or if
// it does, then remove it

div.textContent = 'Hello World!'                               
// creates a text node containing "Hello World!" and
// inserts it in div

div.innerHTML = '<span>Hello World!</span>';                   
// renders the HTML inside div

Keep in mind that the JavaScript does not alter your HTML, 
but the DOM - your HTML file will look the same, 
but the JavaScript changes what the browser renders.

Basically JS just changes that current instance when it is run
but won't change the actual HTML file